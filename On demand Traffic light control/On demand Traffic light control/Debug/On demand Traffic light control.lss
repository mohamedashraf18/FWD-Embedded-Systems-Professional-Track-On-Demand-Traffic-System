
On demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000666  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000666  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000666  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f0d  00000000  00000000  000007bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b8  00000000  00000000  000016c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096f  00000000  00000000  00001e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000027f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  00002984  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000063f  00000000  00000000  00002e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003441  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 0b 01 	call	0x216	; 0x216 <main>
  74:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:

void APP_init  (void){
	
	/*the button is an input device*/
	
	BUTTON_init(DIO_PORTD,DIO_PIN2);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <BUTTON_init>
	
	/*the leds are output devices*/
	
	LED_init(DIO_PORTA,DIO_PIN0);
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LED_init>
	LED_init(DIO_PORTA,DIO_PIN1);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LED_init>
	LED_init(DIO_PORTA,DIO_PIN2);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LED_init>
	
	LED_init(DIO_PORTB,DIO_PIN0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LED_init>
	LED_init(DIO_PORTB,DIO_PIN1);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LED_init>
	LED_init(DIO_PORTB,DIO_PIN2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <LED_init>
  b4:	08 95       	ret

000000b6 <APP_start>:
	
	unsigned int overflowcounter = 0;
	unsigned int overflowcounter1 = 0;
	
	/*enable global interrupt*/
	sei();
  b6:	78 94       	sei
	
	/* set interrupt sense to rising edge */
	MCUCR |= (1<<ISC00) | (1<<ISC01);
  b8:	85 b7       	in	r24, 0x35	; 53
  ba:	83 60       	ori	r24, 0x03	; 3
  bc:	85 bf       	out	0x35, r24	; 53
	
	/*enable external interrupt INT0*/
	SET_BIT(GICR,INT0);
  be:	8b b7       	in	r24, 0x3b	; 59
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8b bf       	out	0x3b, r24	; 59
	
	/*CHOOSE TIMER MODE */
	TCCR0 = 0x00; /*NORMAL MODE*/
  c4:	13 be       	out	0x33, r1	; 51
	
	/*TIMER SET INITIAL VALUE*/
	TCNT0 = 0x00;
  c6:	12 be       	out	0x32, r1	; 50
	
	/*TIMER START*/
	SET_BIT(TCCR0,0); /*NO PRESCALER*/
  c8:	83 b7       	in	r24, 0x33	; 51
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	83 bf       	out	0x33, r24	; 51
		
	while (1)
	{
		 /*INITIALLY CARS RED LIGHT IS ON WHILE PEDESTRIANS GREEN LIGHT IS ON*/
		 LED_on(DIO_PORTA,DIO_PIN0);
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	0e 94 00 01 	call	0x200	; 0x200 <LED_on>
		 LED_on(DIO_PORTB,DIO_PIN2);
  d6:	62 e0       	ldi	r22, 0x02	; 2
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	0e 94 00 01 	call	0x200	; 0x200 <LED_on>
		 
		 while ( overflowcounter <  NUMBER_OF_OVERFLOWS ){
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	08 c0       	rjmp	.+16     	; 0xf4 <APP_start+0x3e>
			 
			 /* WAIT UNTIL THE OVERFLOW FLAG TO BE SET */
			 while ( (TIFR & (1<<0)) == 0 );
  e4:	08 b6       	in	r0, 0x38	; 56
  e6:	00 fe       	sbrs	r0, 0
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <APP_start+0x2e>
			 
			 /* CLEAR THE OVERFLOW FLAG*/
			 SET_BIT(TIFR,0);
  ea:	88 b7       	in	r24, 0x38	; 56
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	88 bf       	out	0x38, r24	; 56
			 
			 overflowcounter++;
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		 /*INITIALLY CARS RED LIGHT IS ON WHILE PEDESTRIANS GREEN LIGHT IS ON*/
		 LED_on(DIO_PORTA,DIO_PIN0);
		 LED_on(DIO_PORTB,DIO_PIN2);
		 
		 while ( overflowcounter <  NUMBER_OF_OVERFLOWS ){
  f4:	2c 34       	cpi	r18, 0x4C	; 76
  f6:	8c e4       	ldi	r24, 0x4C	; 76
  f8:	38 07       	cpc	r19, r24
  fa:	a0 f3       	brcs	.-24     	; 0xe4 <APP_start+0x2e>
			 overflowcounter++;
		 }
		 
		 overflowcounter = 0;
		 
		 TCNT0 = 0x00;
  fc:	12 be       	out	0x32, r1	; 50
		 
		 /*CARS RED LIGHT IS OFF PEDESTRIANS GREEN LIGHT IS OFF*/
		 LED_off(DIO_PORTA,DIO_PIN0);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
		 LED_off(DIO_PORTB,DIO_PIN2);
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
			 SET_BIT(TIFR,0);
			 
			 overflowcounter++;
		 }
		 
		 overflowcounter = 0;
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
		 LED_off(DIO_PORTA,DIO_PIN0);
		 LED_off(DIO_PORTB,DIO_PIN2);
		 
/***********************************************************************************************************************************************/
		 /* yellow light in cars and pedestrians blinks */ 
		 while( overflowcounter <  NUMBER_OF_OVERFLOWS1 )
 112:	19 c0       	rjmp	.+50     	; 0x146 <APP_start+0x90>
		 {
			
			LED_toggle(DIO_PORTA,DIO_PIN1);
 114:	61 e0       	ldi	r22, 0x01	; 1
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 08 01 	call	0x210	; 0x210 <LED_toggle>
			LED_toggle(DIO_PORTB,DIO_PIN1);
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 08 01 	call	0x210	; 0x210 <LED_toggle>
			
			while(overflowcounter1 < NUMBER_OF_OVERFLOWS2 )
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	08 c0       	rjmp	.+16     	; 0x13a <APP_start+0x84>
			{
				/* WAIT UNTIL THE OVERFLOW FLAG TO BE SET */
				while ( (TIFR & (1<<0)) == 0 );
 12a:	08 b6       	in	r0, 0x38	; 56
 12c:	00 fe       	sbrs	r0, 0
 12e:	fd cf       	rjmp	.-6      	; 0x12a <APP_start+0x74>
				
				/* CLEAR THE OVERFLOW FLAG*/
				SET_BIT(TIFR,0);
 130:	88 b7       	in	r24, 0x38	; 56
 132:	81 60       	ori	r24, 0x01	; 1
 134:	88 bf       	out	0x38, r24	; 56
				
				overflowcounter1++;
 136:	2f 5f       	subi	r18, 0xFF	; 255
 138:	3f 4f       	sbci	r19, 0xFF	; 255
		 {
			
			LED_toggle(DIO_PORTA,DIO_PIN1);
			LED_toggle(DIO_PORTB,DIO_PIN1);
			
			while(overflowcounter1 < NUMBER_OF_OVERFLOWS2 )
 13a:	28 3e       	cpi	r18, 0xE8	; 232
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	38 07       	cpc	r19, r24
 140:	a0 f3       	brcs	.-24     	; 0x12a <APP_start+0x74>
				
				overflowcounter1++;
			}
			
			overflowcounter1 = 0;
	        TCNT0 = 0x00;
 142:	12 be       	out	0x32, r1	; 50
	
	        overflowcounter++;
 144:	21 96       	adiw	r28, 0x01	; 1
		 LED_off(DIO_PORTA,DIO_PIN0);
		 LED_off(DIO_PORTB,DIO_PIN2);
		 
/***********************************************************************************************************************************************/
		 /* yellow light in cars and pedestrians blinks */ 
		 while( overflowcounter <  NUMBER_OF_OVERFLOWS1 )
 146:	c4 31       	cpi	r28, 0x14	; 20
 148:	d1 05       	cpc	r29, r1
 14a:	20 f3       	brcs	.-56     	; 0x114 <APP_start+0x5e>
	        TCNT0 = 0x00;
	
	        overflowcounter++;
		 }
		 overflowcounter = 0;
		 TCNT0 = 0x00;
 14c:	12 be       	out	0x32, r1	; 50
		 
		 /*CARS yellow LIGHT IS OFF AND PEDESTRIANS yellow LIGHT IS OFF*/
		 LED_off(DIO_PORTA,DIO_PIN1);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
		 LED_off(DIO_PORTA,DIO_PIN1);
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
		 
	/*************************************************************************************************************************************/	 
		  /* CARS green LIGHT IS ON WHILE PEDESTRIANS red LIGHT IS ON*/
		  LED_on(DIO_PORTA,DIO_PIN2);
 15e:	62 e0       	ldi	r22, 0x02	; 2
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	0e 94 00 01 	call	0x200	; 0x200 <LED_on>
		  LED_on(DIO_PORTB,DIO_PIN0);
 166:	60 e0       	ldi	r22, 0x00	; 0
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 00 01 	call	0x200	; 0x200 <LED_on>
			overflowcounter1 = 0;
	        TCNT0 = 0x00;
	
	        overflowcounter++;
		 }
		 overflowcounter = 0;
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
	/*************************************************************************************************************************************/	 
		  /* CARS green LIGHT IS ON WHILE PEDESTRIANS red LIGHT IS ON*/
		  LED_on(DIO_PORTA,DIO_PIN2);
		  LED_on(DIO_PORTB,DIO_PIN0);
		  
		  while ( overflowcounter <  NUMBER_OF_OVERFLOWS ){
 172:	08 c0       	rjmp	.+16     	; 0x184 <APP_start+0xce>
			  
			  /* WAIT UNTIL THE OVERFLOW FLAG TO BE SET */
			  while ( (TIFR & (1<<0)) == 0 );
 174:	08 b6       	in	r0, 0x38	; 56
 176:	00 fe       	sbrs	r0, 0
 178:	fd cf       	rjmp	.-6      	; 0x174 <APP_start+0xbe>
			  
			  /* CLEAR THE OVERFLOW FLAG*/
			  SET_BIT(TIFR,0);
 17a:	88 b7       	in	r24, 0x38	; 56
 17c:	81 60       	ori	r24, 0x01	; 1
 17e:	88 bf       	out	0x38, r24	; 56
			  
			  overflowcounter++;
 180:	2f 5f       	subi	r18, 0xFF	; 255
 182:	3f 4f       	sbci	r19, 0xFF	; 255
	/*************************************************************************************************************************************/	 
		  /* CARS green LIGHT IS ON WHILE PEDESTRIANS red LIGHT IS ON*/
		  LED_on(DIO_PORTA,DIO_PIN2);
		  LED_on(DIO_PORTB,DIO_PIN0);
		  
		  while ( overflowcounter <  NUMBER_OF_OVERFLOWS ){
 184:	2c 34       	cpi	r18, 0x4C	; 76
 186:	8c e4       	ldi	r24, 0x4C	; 76
 188:	38 07       	cpc	r19, r24
 18a:	a0 f3       	brcs	.-24     	; 0x174 <APP_start+0xbe>
			  overflowcounter++;
		  }
		  
		  overflowcounter = 0;
		  
		  TCNT0 = 0x00;
 18c:	12 be       	out	0x32, r1	; 50
		  
		  /*CARS green LIGHT IS OFF PEDESTRIANS red LIGHT IS OFF*/
		  LED_off(DIO_PORTA,DIO_PIN2);
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
		  LED_off(DIO_PORTB,DIO_PIN0);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
			  SET_BIT(TIFR,0);
			  
			  overflowcounter++;
		  }
		  
		  overflowcounter = 0;
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	d0 e0       	ldi	r29, 0x00	; 0
		  /*CARS green LIGHT IS OFF PEDESTRIANS red LIGHT IS OFF*/
		  LED_off(DIO_PORTA,DIO_PIN2);
		  LED_off(DIO_PORTB,DIO_PIN0);
	/*****************************************************************************************************************************************/	  
		   /* yellow light in cars and pedestrians blinks */
		   while( overflowcounter <  NUMBER_OF_OVERFLOWS1 )
 1a2:	19 c0       	rjmp	.+50     	; 0x1d6 <APP_start+0x120>
		   {
			   
			   LED_toggle(DIO_PORTA,DIO_PIN1);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 08 01 	call	0x210	; 0x210 <LED_toggle>
			   LED_toggle(DIO_PORTB,DIO_PIN1);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	0e 94 08 01 	call	0x210	; 0x210 <LED_toggle>
			   
			   while(overflowcounter1 < NUMBER_OF_OVERFLOWS2 )
 1b4:	20 e0       	ldi	r18, 0x00	; 0
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	08 c0       	rjmp	.+16     	; 0x1ca <APP_start+0x114>
			   {
				   /* WAIT UNTIL THE OVERFLOW FLAG TO BE SET */
				   while ( (TIFR & (1<<0)) == 0 );
 1ba:	08 b6       	in	r0, 0x38	; 56
 1bc:	00 fe       	sbrs	r0, 0
 1be:	fd cf       	rjmp	.-6      	; 0x1ba <APP_start+0x104>
				   
				   /* CLEAR THE OVERFLOW FLAG*/
				   SET_BIT(TIFR,0);
 1c0:	88 b7       	in	r24, 0x38	; 56
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	88 bf       	out	0x38, r24	; 56
				   
				   overflowcounter1++;
 1c6:	2f 5f       	subi	r18, 0xFF	; 255
 1c8:	3f 4f       	sbci	r19, 0xFF	; 255
		   {
			   
			   LED_toggle(DIO_PORTA,DIO_PIN1);
			   LED_toggle(DIO_PORTB,DIO_PIN1);
			   
			   while(overflowcounter1 < NUMBER_OF_OVERFLOWS2 )
 1ca:	28 3e       	cpi	r18, 0xE8	; 232
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	38 07       	cpc	r19, r24
 1d0:	a0 f3       	brcs	.-24     	; 0x1ba <APP_start+0x104>
				   
				   overflowcounter1++;
			   }
			   
			   overflowcounter1 = 0;
			   TCNT0 = 0x00;
 1d2:	12 be       	out	0x32, r1	; 50
			   
			   overflowcounter++;
 1d4:	21 96       	adiw	r28, 0x01	; 1
		  /*CARS green LIGHT IS OFF PEDESTRIANS red LIGHT IS OFF*/
		  LED_off(DIO_PORTA,DIO_PIN2);
		  LED_off(DIO_PORTB,DIO_PIN0);
	/*****************************************************************************************************************************************/	  
		   /* yellow light in cars and pedestrians blinks */
		   while( overflowcounter <  NUMBER_OF_OVERFLOWS1 )
 1d6:	c4 31       	cpi	r28, 0x14	; 20
 1d8:	d1 05       	cpc	r29, r1
 1da:	20 f3       	brcs	.-56     	; 0x1a4 <APP_start+0xee>
			   TCNT0 = 0x00;
			   
			   overflowcounter++;
		   }
		   overflowcounter = 0;
		   TCNT0 = 0x00;
 1dc:	12 be       	out	0x32, r1	; 50
		   
		   /*CARS yellow LIGHT IS OFF PEDESTRIANS yellow LIGHT IS OFF*/
		   LED_off(DIO_PORTA,DIO_PIN1);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
		   LED_off(DIO_PORTA,DIO_PIN1);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
		 
		
		 
	}
 1ee:	6f cf       	rjmp	.-290    	; 0xce <APP_start+0x18>

000001f0 <BUTTON_init>:
#include "button.h"


void BUTTON_init (u8 buttonport , u8 buttonpin){
	
	DIO_SetPinDirection(buttonport,buttonpin,DIO_PIN_INPUT);  /*BUTTON IS AN INPUT DEVICE*/
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	0e 94 81 01 	call	0x302	; 0x302 <DIO_SetPinDirection>
 1f6:	08 95       	ret

000001f8 <LED_init>:

#include "led.h" 

void LED_init    (u8 ledport , u8 ledpin){
	
	DIO_SetPinDirection(ledport,ledpin,DIO_PIN_OUTPUT);   /*led is an output device*/
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	0e 94 81 01 	call	0x302	; 0x302 <DIO_SetPinDirection>
 1fe:	08 95       	ret

00000200 <LED_on>:
}

void LED_on      (u8 ledport , u8 ledpin){
	
	DIO_SetPinValue(ledport,ledpin,DIO_PIN_HIGH);
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DIO_SetPinValue>
 206:	08 95       	ret

00000208 <LED_off>:
}

void LED_off     (u8 ledport , u8 ledpin){
	
	DIO_SetPinValue(ledport,ledpin,DIO_PIN_LOW);
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <DIO_SetPinValue>
 20e:	08 95       	ret

00000210 <LED_toggle>:
}

void LED_toggle  (u8 ledport , u8 ledpin){
	
	DIO_TogglePinValue(ledport,ledpin);
 210:	0e 94 bf 02 	call	0x57e	; 0x57e <DIO_TogglePinValue>
 214:	08 95       	ret

00000216 <main>:

int main(void)
{
    /* Replace with your application code */
	
	APP_init();
 216:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_start();
 21a:	0e 94 5b 00 	call	0xb6	; 0xb6 <APP_start>
   
}
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	08 95       	ret

00000224 <__vector_1>:
ISR(INT0_vect)  /*THIS PIECE OF CODE WILL NOT BE TRIGGERED UNTIL THE BUTTON IS PRESSED*/
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	6f 93       	push	r22
 238:	7f 93       	push	r23
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	af 93       	push	r26
 240:	bf 93       	push	r27
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	ef 93       	push	r30
 248:	ff 93       	push	r31
	static unsigned int value;
	
	unsigned int overflowcounter  = 0;
	unsigned int overflowcounter1 = 0;
	
	DIO_GetPinValue   (DIO_PORTA,DIO_PIN0,&value);
 24a:	40 e6       	ldi	r20, 0x60	; 96
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 6d 02 	call	0x4da	; 0x4da <DIO_GetPinValue>
	
	if(value == DIO_PIN_LOW ) /*MEANS THAT CARS' RED LIGHT IS OFF WHICH MEANS CARS' GREEN OR YELLOW LIGHT IS MAYBE ON */
 256:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 25a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 25e:	89 2b       	or	r24, r25
 260:	c1 f5       	brne	.+112    	; 0x2d2 <__vector_1+0xae>
	{ 
		/*YELLOW LIGHTS ARE OFF INCASE THEY WERE ON*/
		LED_off(DIO_PORTA,DIO_PIN1); 
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
		LED_off(DIO_PORTB,DIO_PIN1);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
		/*CARS' GREEN LIGHT AND PEDESTRIANS' RED LIGHT ARE BOTH OFF INCASE THEY WERE ON*/
		LED_off(DIO_PORTA,DIO_PIN2);
 272:	62 e0       	ldi	r22, 0x02	; 2
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
		LED_off(DIO_PORTB,DIO_PIN0);
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
ISR(INT0_vect)  /*THIS PIECE OF CODE WILL NOT BE TRIGGERED UNTIL THE BUTTON IS PRESSED*/
{
	/*variable to store the value of cars' red led*/
	static unsigned int value;
	
	unsigned int overflowcounter  = 0;
 282:	c0 e0       	ldi	r28, 0x00	; 0
 284:	d0 e0       	ldi	r29, 0x00	; 0
		/*CARS' GREEN LIGHT AND PEDESTRIANS' RED LIGHT ARE BOTH OFF INCASE THEY WERE ON*/
		LED_off(DIO_PORTA,DIO_PIN2);
		LED_off(DIO_PORTB,DIO_PIN0);
		
		 /* yellow light in cars and pedestrians blinks */
		 while( overflowcounter <  NUMBER_OF_OVERFLOWS1 )
 286:	19 c0       	rjmp	.+50     	; 0x2ba <__vector_1+0x96>
		 {
			 
			 LED_toggle(DIO_PORTA,DIO_PIN1);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 08 01 	call	0x210	; 0x210 <LED_toggle>
			 LED_toggle(DIO_PORTB,DIO_PIN1);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 08 01 	call	0x210	; 0x210 <LED_toggle>
			 
			 while(overflowcounter1 < NUMBER_OF_OVERFLOWS2 )
 298:	20 e0       	ldi	r18, 0x00	; 0
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	08 c0       	rjmp	.+16     	; 0x2ae <__vector_1+0x8a>
			 {
				 /* WAIT UNTIL THE OVERFLOW FLAG TO BE SET */
				 while ( (TIFR & (1<<0)) == 0 );
 29e:	08 b6       	in	r0, 0x38	; 56
 2a0:	00 fe       	sbrs	r0, 0
 2a2:	fd cf       	rjmp	.-6      	; 0x29e <__vector_1+0x7a>
				 
				 /* CLEAR THE OVERFLOW FLAG*/
				 SET_BIT(TIFR,0);
 2a4:	88 b7       	in	r24, 0x38	; 56
 2a6:	81 60       	ori	r24, 0x01	; 1
 2a8:	88 bf       	out	0x38, r24	; 56
				 
				 overflowcounter1++;
 2aa:	2f 5f       	subi	r18, 0xFF	; 255
 2ac:	3f 4f       	sbci	r19, 0xFF	; 255
		 {
			 
			 LED_toggle(DIO_PORTA,DIO_PIN1);
			 LED_toggle(DIO_PORTB,DIO_PIN1);
			 
			 while(overflowcounter1 < NUMBER_OF_OVERFLOWS2 )
 2ae:	28 3e       	cpi	r18, 0xE8	; 232
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	38 07       	cpc	r19, r24
 2b4:	a0 f3       	brcs	.-24     	; 0x29e <__vector_1+0x7a>
				 
				 overflowcounter1++;
			 }
			 
			 overflowcounter1 = 0;
			 TCNT0 = 0x00;
 2b6:	12 be       	out	0x32, r1	; 50
			 
			 overflowcounter++;
 2b8:	21 96       	adiw	r28, 0x01	; 1
		/*CARS' GREEN LIGHT AND PEDESTRIANS' RED LIGHT ARE BOTH OFF INCASE THEY WERE ON*/
		LED_off(DIO_PORTA,DIO_PIN2);
		LED_off(DIO_PORTB,DIO_PIN0);
		
		 /* yellow light in cars and pedestrians blinks */
		 while( overflowcounter <  NUMBER_OF_OVERFLOWS1 )
 2ba:	c4 31       	cpi	r28, 0x14	; 20
 2bc:	d1 05       	cpc	r29, r1
 2be:	20 f3       	brcs	.-56     	; 0x288 <__vector_1+0x64>
			 TCNT0 = 0x00;
			 
			 overflowcounter++;
		 }
		 overflowcounter = 0;
		 TCNT0 = 0x00;
 2c0:	12 be       	out	0x32, r1	; 50
		 
		 /*CARS yellow LIGHT IS OFF AND PEDESTRIANS yellow LIGHT IS OFF*/
		 LED_off(DIO_PORTA,DIO_PIN1);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
		 LED_off(DIO_PORTA,DIO_PIN1);
 2ca:	61 e0       	ldi	r22, 0x01	; 1
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 04 01 	call	0x208	; 0x208 <LED_off>
	}
	
	/*DISABLE THE EXTERNAL INTERRUPT INT0*/
	CLR_BIT(GICR,INT0);
 2d2:	8b b7       	in	r24, 0x3b	; 59
 2d4:	8f 7b       	andi	r24, 0xBF	; 191
 2d6:	8b bf       	out	0x3b, r24	; 59
	/*RETURN TO THE NORMAL MODE OF THE TRAFFIC SYSTEM UNTIL ANOTHER INTERFERENCE OF THE BUTTON*/
	APP_start();
 2d8:	0e 94 5b 00 	call	0xb6	; 0xb6 <APP_start>
}
 2dc:	ff 91       	pop	r31
 2de:	ef 91       	pop	r30
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	bf 91       	pop	r27
 2e6:	af 91       	pop	r26
 2e8:	9f 91       	pop	r25
 2ea:	8f 91       	pop	r24
 2ec:	7f 91       	pop	r23
 2ee:	6f 91       	pop	r22
 2f0:	5f 91       	pop	r21
 2f2:	4f 91       	pop	r20
 2f4:	3f 91       	pop	r19
 2f6:	2f 91       	pop	r18
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <DIO_SetPinDirection>:

                                /*PIN APIS*/
								
								
void DIO_SetPinDirection   (u8 PortId,u8 PinId,u8 PinDirection){        /*DEALS WITH DATA DIRECTION REGISTER*/
	if((PortId<=3)&&(PinId<=7)&&(PinDirection<=1)){  /*WE USED THIS IF CONDITION TO MAKE SURE THE PortId,PinId AND PinDirection IS NOT OUT OF RANGE*/
 302:	84 30       	cpi	r24, 0x04	; 4
 304:	08 f0       	brcs	.+2      	; 0x308 <DIO_SetPinDirection+0x6>
 306:	72 c0       	rjmp	.+228    	; 0x3ec <DIO_SetPinDirection+0xea>
 308:	68 30       	cpi	r22, 0x08	; 8
 30a:	08 f0       	brcs	.+2      	; 0x30e <DIO_SetPinDirection+0xc>
 30c:	6f c0       	rjmp	.+222    	; 0x3ec <DIO_SetPinDirection+0xea>
 30e:	42 30       	cpi	r20, 0x02	; 2
 310:	08 f0       	brcs	.+2      	; 0x314 <DIO_SetPinDirection+0x12>
 312:	6c c0       	rjmp	.+216    	; 0x3ec <DIO_SetPinDirection+0xea>
		switch(PortId)
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	01 f1       	breq	.+64     	; 0x358 <DIO_SetPinDirection+0x56>
 318:	30 f0       	brcs	.+12     	; 0x326 <DIO_SetPinDirection+0x24>
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	b1 f1       	breq	.+108    	; 0x38a <DIO_SetPinDirection+0x88>
 31e:	83 30       	cpi	r24, 0x03	; 3
 320:	09 f4       	brne	.+2      	; 0x324 <DIO_SetPinDirection+0x22>
 322:	4c c0       	rjmp	.+152    	; 0x3bc <DIO_SetPinDirection+0xba>
 324:	08 95       	ret
		{  case DIO_PORTA:
			if(PinDirection == DIO_PIN_OUTPUT){ /*WE USED THIS IF CONDITION TO MAKE OUR CODE GENERIC AS POSSIBLE SO WE CAN USE IT EVEN IF WE USED NEGATIVE LOGIC */
 326:	41 30       	cpi	r20, 0x01	; 1
 328:	59 f4       	brne	.+22     	; 0x340 <DIO_SetPinDirection+0x3e>
				SET_BIT(DDRA,PinId);
 32a:	2a b3       	in	r18, 0x1a	; 26
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_SetPinDirection+0x34>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_SetPinDirection+0x30>
 33a:	82 2b       	or	r24, r18
 33c:	8a bb       	out	0x1a, r24	; 26
 33e:	08 95       	ret
			}
			else{
				CLR_BIT(DDRA,PinId);
 340:	2a b3       	in	r18, 0x1a	; 26
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_SetPinDirection+0x4a>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_SetPinDirection+0x46>
 350:	80 95       	com	r24
 352:	82 23       	and	r24, r18
 354:	8a bb       	out	0x1a, r24	; 26
 356:	08 95       	ret
			}
			break;
			case DIO_PORTB:
			if(PinDirection == DIO_PIN_OUTPUT){
 358:	41 30       	cpi	r20, 0x01	; 1
 35a:	59 f4       	brne	.+22     	; 0x372 <DIO_SetPinDirection+0x70>
				SET_BIT(DDRB,PinId);
 35c:	27 b3       	in	r18, 0x17	; 23
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_SetPinDirection+0x66>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	6a 95       	dec	r22
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_SetPinDirection+0x62>
 36c:	82 2b       	or	r24, r18
 36e:	87 bb       	out	0x17, r24	; 23
 370:	08 95       	ret
			}
			else{
				CLR_BIT(DDRB,PinId);
 372:	27 b3       	in	r18, 0x17	; 23
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	02 c0       	rjmp	.+4      	; 0x37e <DIO_SetPinDirection+0x7c>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	6a 95       	dec	r22
 380:	e2 f7       	brpl	.-8      	; 0x37a <DIO_SetPinDirection+0x78>
 382:	80 95       	com	r24
 384:	82 23       	and	r24, r18
 386:	87 bb       	out	0x17, r24	; 23
 388:	08 95       	ret
			}
			break;
			case DIO_PORTC:
			if(PinDirection == DIO_PIN_OUTPUT){
 38a:	41 30       	cpi	r20, 0x01	; 1
 38c:	59 f4       	brne	.+22     	; 0x3a4 <DIO_SetPinDirection+0xa2>
				SET_BIT(DDRC,PinId);
 38e:	24 b3       	in	r18, 0x14	; 20
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_SetPinDirection+0x98>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	6a 95       	dec	r22
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_SetPinDirection+0x94>
 39e:	82 2b       	or	r24, r18
 3a0:	84 bb       	out	0x14, r24	; 20
 3a2:	08 95       	ret
			}
			else{
				CLR_BIT(DDRC,PinId);
 3a4:	24 b3       	in	r18, 0x14	; 20
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_SetPinDirection+0xae>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_SetPinDirection+0xaa>
 3b4:	80 95       	com	r24
 3b6:	82 23       	and	r24, r18
 3b8:	84 bb       	out	0x14, r24	; 20
 3ba:	08 95       	ret
			}
			
			break;
			case DIO_PORTD:
			if(PinDirection == DIO_PIN_OUTPUT){
 3bc:	41 30       	cpi	r20, 0x01	; 1
 3be:	59 f4       	brne	.+22     	; 0x3d6 <DIO_SetPinDirection+0xd4>
				SET_BIT(DDRD,PinId);
 3c0:	21 b3       	in	r18, 0x11	; 17
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_SetPinDirection+0xca>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_SetPinDirection+0xc6>
 3d0:	82 2b       	or	r24, r18
 3d2:	81 bb       	out	0x11, r24	; 17
 3d4:	08 95       	ret
			}
			else{
				CLR_BIT(DDRD,PinId);
 3d6:	21 b3       	in	r18, 0x11	; 17
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_SetPinDirection+0xe0>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	6a 95       	dec	r22
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_SetPinDirection+0xdc>
 3e6:	80 95       	com	r24
 3e8:	82 23       	and	r24, r18
 3ea:	81 bb       	out	0x11, r24	; 17
 3ec:	08 95       	ret

000003ee <DIO_SetPinValue>:
	
	
}
void DIO_SetPinValue       (u8 PortId,u8 PinId,u8 PinValue){    /*DEALS WITH OUTPUT REGISTER*/
	
	if( (PortId<=3) && (PinId<=7) && (PinValue<=1) ){
 3ee:	84 30       	cpi	r24, 0x04	; 4
 3f0:	08 f0       	brcs	.+2      	; 0x3f4 <DIO_SetPinValue+0x6>
 3f2:	72 c0       	rjmp	.+228    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 3f4:	68 30       	cpi	r22, 0x08	; 8
 3f6:	08 f0       	brcs	.+2      	; 0x3fa <DIO_SetPinValue+0xc>
 3f8:	6f c0       	rjmp	.+222    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 3fa:	42 30       	cpi	r20, 0x02	; 2
 3fc:	08 f0       	brcs	.+2      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fe:	6c c0       	rjmp	.+216    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
		
		switch(PortId){
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	01 f1       	breq	.+64     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 404:	30 f0       	brcs	.+12     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 406:	82 30       	cpi	r24, 0x02	; 2
 408:	b1 f1       	breq	.+108    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 40a:	83 30       	cpi	r24, 0x03	; 3
 40c:	09 f4       	brne	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40e:	4c c0       	rjmp	.+152    	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 410:	08 95       	ret
			
			case DIO_PORTA :
			
			if(PinValue == DIO_PIN_HIGH ){
 412:	41 30       	cpi	r20, 0x01	; 1
 414:	59 f4       	brne	.+22     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				
				SET_BIT(PORTA,PinId);
 416:	2b b3       	in	r18, 0x1b	; 27
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	6a 95       	dec	r22
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	82 2b       	or	r24, r18
 428:	8b bb       	out	0x1b, r24	; 27
 42a:	08 95       	ret
				
			}
			else {
				CLR_BIT(PORTA,PinId);
 42c:	2b b3       	in	r18, 0x1b	; 27
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	80 95       	com	r24
 43e:	82 23       	and	r24, r18
 440:	8b bb       	out	0x1b, r24	; 27
 442:	08 95       	ret
			}
			break;
			
			case DIO_PORTB :
			
			if(PinValue == DIO_PIN_HIGH ){
 444:	41 30       	cpi	r20, 0x01	; 1
 446:	59 f4       	brne	.+22     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
				
				SET_BIT(PORTB,PinId);
 448:	28 b3       	in	r18, 0x18	; 24
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	82 2b       	or	r24, r18
 45a:	88 bb       	out	0x18, r24	; 24
 45c:	08 95       	ret
				
			}
			else {
				CLR_BIT(PORTB,PinId);
 45e:	28 b3       	in	r18, 0x18	; 24
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	80 95       	com	r24
 470:	82 23       	and	r24, r18
 472:	88 bb       	out	0x18, r24	; 24
 474:	08 95       	ret
			}
			break;
			
			case DIO_PORTC :
			
			if(PinValue == DIO_PIN_HIGH ){
 476:	41 30       	cpi	r20, 0x01	; 1
 478:	59 f4       	brne	.+22     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
				
				SET_BIT(PORTC,PinId);
 47a:	25 b3       	in	r18, 0x15	; 21
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 48a:	82 2b       	or	r24, r18
 48c:	85 bb       	out	0x15, r24	; 21
 48e:	08 95       	ret
				
			}
			else {
				CLR_BIT(PORTC,PinId);
 490:	25 b3       	in	r18, 0x15	; 21
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4a0:	80 95       	com	r24
 4a2:	82 23       	and	r24, r18
 4a4:	85 bb       	out	0x15, r24	; 21
 4a6:	08 95       	ret
			}
			break;
			
			case DIO_PORTD :
			
			if(PinValue == DIO_PIN_HIGH ){
 4a8:	41 30       	cpi	r20, 0x01	; 1
 4aa:	59 f4       	brne	.+22     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
				
				SET_BIT(PORTD,PinId);
 4ac:	22 b3       	in	r18, 0x12	; 18
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	6a 95       	dec	r22
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	82 2b       	or	r24, r18
 4be:	82 bb       	out	0x12, r24	; 18
 4c0:	08 95       	ret
				
			}
			else {
				CLR_BIT(PORTD,PinId);
 4c2:	22 b3       	in	r18, 0x12	; 18
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4d2:	80 95       	com	r24
 4d4:	82 23       	and	r24, r18
 4d6:	82 bb       	out	0x12, r24	; 18
 4d8:	08 95       	ret

000004da <DIO_GetPinValue>:
}

void DIO_GetPinValue       (u8 PortId,u8 PinId,u8* PinValue){       /* DEALS WITH INPUT REGISTER 
																	* AND IT CAN DEAL WITH OUTPUT REGISTER IF WE WANT TO MAKE SURE OF THE VALUE WE OUTPUT FOR SOME REASON */
	
	if( (PortId<=3) && (PinId<=7) && (PinValue!=NULL) ){
 4da:	84 30       	cpi	r24, 0x04	; 4
 4dc:	08 f0       	brcs	.+2      	; 0x4e0 <DIO_GetPinValue+0x6>
 4de:	4e c0       	rjmp	.+156    	; 0x57c <DIO_GetPinValue+0xa2>
 4e0:	68 30       	cpi	r22, 0x08	; 8
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <DIO_GetPinValue+0xc>
 4e4:	4b c0       	rjmp	.+150    	; 0x57c <DIO_GetPinValue+0xa2>
 4e6:	41 15       	cp	r20, r1
 4e8:	51 05       	cpc	r21, r1
 4ea:	09 f4       	brne	.+2      	; 0x4ee <DIO_GetPinValue+0x14>
 4ec:	47 c0       	rjmp	.+142    	; 0x57c <DIO_GetPinValue+0xa2>
		
		switch(PortId){
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	b1 f0       	breq	.+44     	; 0x51e <DIO_GetPinValue+0x44>
 4f2:	28 f0       	brcs	.+10     	; 0x4fe <DIO_GetPinValue+0x24>
 4f4:	82 30       	cpi	r24, 0x02	; 2
 4f6:	19 f1       	breq	.+70     	; 0x53e <DIO_GetPinValue+0x64>
 4f8:	83 30       	cpi	r24, 0x03	; 3
 4fa:	89 f1       	breq	.+98     	; 0x55e <DIO_GetPinValue+0x84>
 4fc:	08 95       	ret
			
			case DIO_PORTA:
			
			if (GET_BIT(PINA,PinId) == DIO_PIN_HIGH){
 4fe:	89 b3       	in	r24, 0x19	; 25
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_GetPinValue+0x2e>
 504:	95 95       	asr	r25
 506:	87 95       	ror	r24
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_GetPinValue+0x2a>
 50c:	80 ff       	sbrs	r24, 0
 50e:	04 c0       	rjmp	.+8      	; 0x518 <DIO_GetPinValue+0x3e>
				
				*PinValue = DIO_PIN_HIGH;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	fa 01       	movw	r30, r20
 514:	80 83       	st	Z, r24
 516:	08 95       	ret
				
			}
			else {
				*PinValue = DIO_PIN_LOW;
 518:	fa 01       	movw	r30, r20
 51a:	10 82       	st	Z, r1
 51c:	08 95       	ret
			}
			
			break;
			case DIO_PORTB:
			
			if (GET_BIT(PINB,PinId) == DIO_PIN_HIGH){
 51e:	86 b3       	in	r24, 0x16	; 22
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_GetPinValue+0x4e>
 524:	95 95       	asr	r25
 526:	87 95       	ror	r24
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_GetPinValue+0x4a>
 52c:	80 ff       	sbrs	r24, 0
 52e:	04 c0       	rjmp	.+8      	; 0x538 <DIO_GetPinValue+0x5e>
				
				*PinValue = DIO_PIN_HIGH;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	fa 01       	movw	r30, r20
 534:	80 83       	st	Z, r24
 536:	08 95       	ret
				
			}
			else {
				*PinValue = DIO_PIN_LOW;
 538:	fa 01       	movw	r30, r20
 53a:	10 82       	st	Z, r1
 53c:	08 95       	ret
			}
			
			break;
			case DIO_PORTC:
			
			if (GET_BIT(PINC,PinId) == DIO_PIN_HIGH){
 53e:	83 b3       	in	r24, 0x13	; 19
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_GetPinValue+0x6e>
 544:	95 95       	asr	r25
 546:	87 95       	ror	r24
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_GetPinValue+0x6a>
 54c:	80 ff       	sbrs	r24, 0
 54e:	04 c0       	rjmp	.+8      	; 0x558 <DIO_GetPinValue+0x7e>
				
				*PinValue = DIO_PIN_HIGH;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	fa 01       	movw	r30, r20
 554:	80 83       	st	Z, r24
 556:	08 95       	ret
				
			}
			else {
				*PinValue = DIO_PIN_LOW;
 558:	fa 01       	movw	r30, r20
 55a:	10 82       	st	Z, r1
 55c:	08 95       	ret
			}
			
			break;
			case DIO_PORTD:
			
			if (GET_BIT(PIND,PinId) == DIO_PIN_HIGH){
 55e:	80 b3       	in	r24, 0x10	; 16
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_GetPinValue+0x8e>
 564:	95 95       	asr	r25
 566:	87 95       	ror	r24
 568:	6a 95       	dec	r22
 56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_GetPinValue+0x8a>
 56c:	80 ff       	sbrs	r24, 0
 56e:	04 c0       	rjmp	.+8      	; 0x578 <DIO_GetPinValue+0x9e>
				
				*PinValue = DIO_PIN_HIGH;
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	fa 01       	movw	r30, r20
 574:	80 83       	st	Z, r24
 576:	08 95       	ret
				
			}
			else {
				*PinValue = DIO_PIN_LOW;
 578:	fa 01       	movw	r30, r20
 57a:	10 82       	st	Z, r1
 57c:	08 95       	ret

0000057e <DIO_TogglePinValue>:
	
}


void DIO_TogglePinValue    (u8 PortId,u8 PinId){
	if( (PortId<=3)&&(PinId<=7) ){
 57e:	84 30       	cpi	r24, 0x04	; 4
 580:	a8 f5       	brcc	.+106    	; 0x5ec <DIO_TogglePinValue+0x6e>
 582:	68 30       	cpi	r22, 0x08	; 8
 584:	98 f5       	brcc	.+102    	; 0x5ec <DIO_TogglePinValue+0x6e>
		
		switch(PortId){
 586:	81 30       	cpi	r24, 0x01	; 1
 588:	89 f0       	breq	.+34     	; 0x5ac <DIO_TogglePinValue+0x2e>
 58a:	28 f0       	brcs	.+10     	; 0x596 <DIO_TogglePinValue+0x18>
 58c:	82 30       	cpi	r24, 0x02	; 2
 58e:	c9 f0       	breq	.+50     	; 0x5c2 <DIO_TogglePinValue+0x44>
 590:	83 30       	cpi	r24, 0x03	; 3
 592:	11 f1       	breq	.+68     	; 0x5d8 <DIO_TogglePinValue+0x5a>
 594:	08 95       	ret
			
			case DIO_PORTA :
			
			TOG_BIT(PORTA,PinId);
 596:	2b b3       	in	r18, 0x1b	; 27
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_TogglePinValue+0x24>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	6a 95       	dec	r22
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_TogglePinValue+0x20>
 5a6:	82 27       	eor	r24, r18
 5a8:	8b bb       	out	0x1b, r24	; 27
			
			
			break;
 5aa:	08 95       	ret
			
			case DIO_PORTB :
			
			TOG_BIT(PORTB,PinId);
 5ac:	28 b3       	in	r18, 0x18	; 24
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_TogglePinValue+0x3a>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	6a 95       	dec	r22
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_TogglePinValue+0x36>
 5bc:	82 27       	eor	r24, r18
 5be:	88 bb       	out	0x18, r24	; 24
			
			
			break;
 5c0:	08 95       	ret
			
			case DIO_PORTC :
			
			TOG_BIT(PORTC,PinId);
 5c2:	25 b3       	in	r18, 0x15	; 21
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <DIO_TogglePinValue+0x50>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	6a 95       	dec	r22
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <DIO_TogglePinValue+0x4c>
 5d2:	82 27       	eor	r24, r18
 5d4:	85 bb       	out	0x15, r24	; 21
			
			
			break;
 5d6:	08 95       	ret
			
			case DIO_PORTD :
			
			TOG_BIT(PORTD,PinId);
 5d8:	22 b3       	in	r18, 0x12	; 18
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_TogglePinValue+0x66>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_TogglePinValue+0x62>
 5e8:	82 27       	eor	r24, r18
 5ea:	82 bb       	out	0x12, r24	; 18
 5ec:	08 95       	ret

000005ee <_exit>:
 5ee:	f8 94       	cli

000005f0 <__stop_program>:
 5f0:	ff cf       	rjmp	.-2      	; 0x5f0 <__stop_program>
